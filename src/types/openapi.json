{
  "openapi": "3.0.0",
  "info": {
    "title": "AeroDB API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Airport"
    },
    {
      "name": "User"
    },
    {
      "name": "Country"
    },
    {
      "name": "Notam"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Search"
    }
  ],
  "paths": {
    "/airports": {
      "get": {
        "operationId": "Airports_list",
        "summary": "List all airports",
        "parameters": [
          {
            "$ref": "#/components/parameters/ListParameters.limit"
          },
          {
            "$ref": "#/components/parameters/ListParameters.page"
          },
          {
            "$ref": "#/components/parameters/ListParameters.filter"
          },
          {
            "$ref": "#/components/parameters/ListParameters.sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Airport"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Airport"
        ]
      },
      "post": {
        "operationId": "Airports_create",
        "summary": "Create a new airport",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "Airport"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Airport"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/airports/{airportId}": {
      "get": {
        "operationId": "Airports_get",
        "summary": "Get an airport by ID",
        "parameters": [
          {
            "name": "airportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource."
          }
        },
        "tags": [
          "Airport"
        ]
      },
      "patch": {
        "operationId": "Airports_update",
        "summary": "Update an existing airport",
        "parameters": [
          {
            "name": "airportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Airport"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AirportUpdate"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "Airports_delete",
        "summary": "Delete an airport by ID",
        "parameters": [
          {
            "name": "airportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Airport"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/countries": {
      "get": {
        "operationId": "Countries_list",
        "summary": "List all countries",
        "parameters": [
          {
            "$ref": "#/components/parameters/ListParameters.limit"
          },
          {
            "$ref": "#/components/parameters/ListParameters.page"
          },
          {
            "$ref": "#/components/parameters/ListParameters.filter"
          },
          {
            "$ref": "#/components/parameters/ListParameters.sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Country"
        ]
      },
      "post": {
        "operationId": "Countries_create",
        "summary": "Create a new country",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "Country"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Country"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/countries/{countryId}": {
      "get": {
        "operationId": "Countries_get",
        "summary": "Get a country by ID",
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Country"
        ]
      },
      "patch": {
        "operationId": "Countries_update",
        "summary": "Update an existing country",
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Country"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryUpdate"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "Countries_delete",
        "summary": "Delete a country",
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Country"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/login": {
      "post": {
        "operationId": "Auth_login",
        "summary": "Authenticate a user and return a JWT token.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthCredentials"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              },
              "example": {
                "email": "john.doe@aerodb.net",
                "password": "password123"
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "operationId": "Auth_getCurrentUser",
        "summary": "Get the current user based on the JWT token.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/notams": {
      "get": {
        "operationId": "Notams_list",
        "summary": "List all NOTAMs",
        "parameters": [
          {
            "$ref": "#/components/parameters/ListParameters.limit"
          },
          {
            "$ref": "#/components/parameters/ListParameters.page"
          },
          {
            "$ref": "#/components/parameters/ListParameters.filter"
          },
          {
            "$ref": "#/components/parameters/ListParameters.sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notam"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notam"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "operationId": "Notams_create",
        "summary": "Create a new NOTAM",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notam"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "Notam"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notam"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/notams/{notamId}": {
      "get": {
        "operationId": "Notams_get",
        "summary": "Get a NOTAM by ID",
        "parameters": [
          {
            "name": "notamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notam"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Notam"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "patch": {
        "operationId": "Notams_update",
        "summary": "Update a NOTAM",
        "parameters": [
          {
            "name": "notamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notam"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Notam"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotamUpdate"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "Notams_delete",
        "summary": "Delete a NOTAM by ID",
        "parameters": [
          {
            "name": "notamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "Notam"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/refreshToken": {
      "post": {
        "operationId": "Auth_refreshToken",
        "summary": "Refresh the JWT token using a refresh token.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthCredentials"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "operationId": "Search_search",
        "summary": "Search in the database",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "Search"
        ]
      }
    },
    "/signup": {
      "post": {
        "operationId": "Auth_signUp",
        "summary": "Create a new user account.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthSignup"
              },
              "example": {
                "email": "john.doe@aerodb.net",
                "password": "password123",
                "username": "john_doe"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "Users_list",
        "summary": "List all users",
        "parameters": [
          {
            "$ref": "#/components/parameters/ListParameters.limit"
          },
          {
            "$ref": "#/components/parameters/ListParameters.page"
          },
          {
            "$ref": "#/components/parameters/ListParameters.filter"
          },
          {
            "$ref": "#/components/parameters/ListParameters.sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "operationId": "Users_create",
        "summary": "Create a new user",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "Users_get",
        "summary": "Get a user by ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "patch": {
        "operationId": "Users_update",
        "summary": "Update an existing user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "Users_delete",
        "summary": "Delete a user by ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/users/{userId}/refreshApiKey": {
      "post": {
        "operationId": "Users_refresh",
        "summary": "Refresh API key for a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "ListParameters.filter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "description": "Filter expression to apply to the list.",
        "schema": {
          "type": "string"
        },
        "explode": false
      },
      "ListParameters.limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "Maximum number of items to return per page.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "maximum": 500,
          "default": 100
        },
        "explode": false
      },
      "ListParameters.page": {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number to retrieve.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 1
        },
        "explode": false
      },
      "ListParameters.sort": {
        "name": "sort",
        "in": "query",
        "required": false,
        "description": "Sort order for the list.",
        "schema": {
          "type": "string"
        },
        "explode": false
      }
    },
    "schemas": {
      "Airport": {
        "type": "object",
        "required": [
          "id",
          "updatedAt",
          "name",
          "icaoCode",
          "iataCode",
          "localCode",
          "latitude",
          "longitude",
          "elevation",
          "countryCode",
          "city",
          "state",
          "county",
          "continentCode",
          "timezone",
          "facilityType",
          "isPrivate",
          "isClosed",
          "frequencies",
          "runways"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID of the airport",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200
          },
          "icaoCode": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{4}$"
          },
          "iataCode": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{3}$"
          },
          "localCode": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "nullable": true
          },
          "elevation": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{2}$",
            "description": "ISO 3166-1 alpha-2 country code"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 50
          },
          "state": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 50
          },
          "county": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 50
          },
          "continentCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContinentCode"
              }
            ],
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 100
          },
          "facilityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FACILITY_TYPE"
              }
            ],
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "nullable": true
          },
          "frequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Frequency"
            }
          },
          "runways": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Runway"
            }
          }
        },
        "example": {
          "id": "1",
          "createdAt": "2020-01-01T00:00:00Z",
          "updatedAt": "2020-01-01T00:00:00Z",
          "icaoCode": "KATL",
          "name": "Hartsfield–Jackson Atlanta International Airport",
          "iataCode": "ATL",
          "localCode": "ATL",
          "latitude": 33.6407,
          "longitude": -84.4277,
          "elevation": 1026,
          "countryCode": "US",
          "city": "Atlanta",
          "state": "Georgia",
          "county": "Fulton",
          "continentCode": "NA",
          "timezone": "America/New_York",
          "facilityType": "InternationalAirport",
          "isPrivate": false,
          "isClosed": false,
          "frequencies": [
            {
              "name": "ATIS",
              "type": "ATIS",
              "description": "Automatic Terminal Information Service",
              "frequency": 118.4
            },
            {
              "name": "Ground Control",
              "type": "Ground",
              "description": "Ground Control Frequency",
              "frequency": 121.9
            },
            {
              "name": "Tower Control",
              "type": "Tower",
              "description": "Tower Control Frequency",
              "frequency": 118.3
            }
          ],
          "runways": [
            {
              "name": "Runway 8L",
              "length": 12000,
              "width": 150,
              "isClosed": false,
              "isLighted": true,
              "lowEndIdent": "8L",
              "lowEndElevation": 1026,
              "lowEndHeading": 80,
              "lowEndDisplacedThreshold": 0,
              "lowEndLatitude": 33.6407,
              "lowEndLongitude": -84.4277,
              "highEndIdent": "26R",
              "highEndElevation": 1026,
              "highEndHeading": 260,
              "highEndDisplacedThreshold": 0,
              "highEndLatitude": 33.6407,
              "highEndLongitude": -84.4277
            }
          ]
        }
      },
      "AirportUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200
          },
          "icaoCode": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{4}$"
          },
          "iataCode": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{3}$"
          },
          "localCode": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "nullable": true
          },
          "elevation": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{2}$",
            "description": "ISO 3166-1 alpha-2 country code"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 50
          },
          "state": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 50
          },
          "county": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 50
          },
          "continentCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContinentCode"
              }
            ],
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "minLength": 2,
            "maxLength": 100
          },
          "facilityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FACILITY_TYPE"
              }
            ],
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "nullable": true
          },
          "frequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Frequency"
            }
          },
          "runways": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Runway"
            }
          }
        },
        "example": {
          "id": "1",
          "createdAt": "2020-01-01T00:00:00Z",
          "updatedAt": "2020-01-01T00:00:00Z",
          "icaoCode": "KATL",
          "name": "Hartsfield–Jackson Atlanta International Airport",
          "iataCode": "ATL",
          "localCode": "ATL",
          "latitude": 33.6407,
          "longitude": -84.4277,
          "elevation": 1026,
          "countryCode": "US",
          "city": "Atlanta",
          "state": "Georgia",
          "county": "Fulton",
          "continentCode": "NA",
          "timezone": "America/New_York",
          "facilityType": "InternationalAirport",
          "isPrivate": false,
          "isClosed": false,
          "frequencies": [
            {
              "name": "ATIS",
              "type": "ATIS",
              "description": "Automatic Terminal Information Service",
              "frequency": 118.4
            },
            {
              "name": "Ground Control",
              "type": "Ground",
              "description": "Ground Control Frequency",
              "frequency": 121.9
            },
            {
              "name": "Tower Control",
              "type": "Tower",
              "description": "Tower Control Frequency",
              "frequency": 118.3
            }
          ],
          "runways": [
            {
              "name": "Runway 8L",
              "length": 12000,
              "width": 150,
              "isClosed": false,
              "isLighted": true,
              "lowEndIdent": "8L",
              "lowEndElevation": 1026,
              "lowEndHeading": 80,
              "lowEndDisplacedThreshold": 0,
              "lowEndLatitude": 33.6407,
              "lowEndLongitude": -84.4277,
              "highEndIdent": "26R",
              "highEndElevation": 1026,
              "highEndHeading": 260,
              "highEndDisplacedThreshold": 0,
              "highEndLatitude": 33.6407,
              "highEndLongitude": -84.4277
            }
          ]
        }
      },
      "AuthCredentials": {
        "type": "object",
        "required": [
          "token",
          "refreshToken",
          "user"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "User object"
          }
        }
      },
      "AuthSignup": {
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 100
          }
        }
      },
      "ContinentCode": {
        "type": "string",
        "enum": [
          "AF",
          "AN",
          "AS",
          "EU",
          "NA",
          "OC",
          "SA",
          "UN"
        ],
        "description": "ISO 3166-1 continent code"
      },
      "Country": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "continentCode",
          "isoId",
          "timezone",
          "countryCode",
          "alpha3",
          "name",
          "subdivisions"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "continentCode": {
            "$ref": "#/components/schemas/ContinentCode"
          },
          "isoId": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "countryCode": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "description": "ISO 3166-1 alpha-2 country code"
          },
          "alpha3": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "ISO 3166-1 alpha-3 country code"
          },
          "name": {
            "type": "string"
          },
          "subdivisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountrySubdivision"
            }
          }
        },
        "example": {
          "id": "1",
          "createdAt": "2020-01-01T00:00:00Z",
          "updatedAt": "2020-01-01T00:00:00Z",
          "continentCode": "NA",
          "isoId": "US",
          "timezone": "America/New_York",
          "countryCode": "US",
          "alpha3": "USA",
          "name": "United States",
          "subdivisions": [
            {
              "code": "CA",
              "name": "California"
            },
            {
              "code": "NY",
              "name": "New York"
            }
          ]
        }
      },
      "CountrySubdivision": {
        "type": "object",
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "example": {
          "code": "AD-07",
          "name": "Andorra la Vella"
        }
      },
      "CountryUpdate": {
        "type": "object",
        "properties": {
          "continentCode": {
            "$ref": "#/components/schemas/ContinentCode"
          },
          "isoId": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "countryCode": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "description": "ISO 3166-1 alpha-2 country code"
          },
          "alpha3": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "ISO 3166-1 alpha-3 country code"
          },
          "name": {
            "type": "string"
          },
          "subdivisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountrySubdivision"
            }
          }
        },
        "example": {
          "id": "1",
          "createdAt": "2020-01-01T00:00:00Z",
          "updatedAt": "2020-01-01T00:00:00Z",
          "continentCode": "NA",
          "isoId": "US",
          "timezone": "America/New_York",
          "countryCode": "US",
          "alpha3": "USA",
          "name": "United States",
          "subdivisions": [
            {
              "code": "CA",
              "name": "California"
            },
            {
              "code": "NY",
              "name": "New York"
            }
          ]
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "status",
          "code",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "FACILITY_TYPE": {
        "type": "string",
        "enum": [
          "Airport",
          "GliderSite",
          "AirfieldCivil",
          "InternationalAirport",
          "HeliportMilitary",
          "MilitaryAerodrome",
          "UltraLightFlyingSite",
          "HeliportCivil",
          "AerodromeClosed",
          "AirportIFR",
          "AirfieldWater",
          "LandingStrip",
          "AgriculturalLandingStrip",
          "Altiport"
        ],
        "description": "A type of facility"
      },
      "Frequency": {
        "type": "object",
        "required": [
          "name",
          "type",
          "description",
          "frequency"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "required": [
          "statusCode",
          "name",
          "message"
        ],
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "name": {
            "type": "string",
            "enum": [
              "Not Found"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Notam": {
        "type": "object",
        "required": [
          "id",
          "updatedAt",
          "notamId",
          "message",
          "transactionId",
          "icao",
          "issueDate",
          "startDate",
          "endDate",
          "source",
          "sourceType",
          "mapPointer",
          "geometry",
          "isSnowtam",
          "isProcedure"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID of the notam",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "notamId": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000,
            "description": "The NOTAM message text."
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "icao": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{4}$"
          },
          "issueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "type": "string",
            "nullable": true
          },
          "mapPointer": {
            "type": "string",
            "nullable": true
          },
          "geometry": {
            "type": "string",
            "nullable": true
          },
          "isSnowtam": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the NOTAM is a SNOWTAM.\nA SNOWTAM (Snow and/or Ice NOTAM) is a special type of NOTAM (Notice to Airmen) issued by an airport to provide pilots with critical information about hazardous conditions on the movement area (runways and taxiways) caused by snow, ice, slush, frost, or standing water"
          },
          "isProcedure": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the NOTAM is related to a procedure."
          }
        },
        "example": {
          "id": "67155d167139c42577c75279",
          "notamId": "A0611/24",
          "message": "A0611/24 NOTAMN\n    Q) LSAS/QFATT/IV/BO/A/000/999/4614N00607E005\n    A) LSGG B) 2410310000 C) 2411132359\n    E) TRIGGER NOTAM - PERM AIRAC AMDT 010/2024:\n    MAG VAR REVISED. \n    RDO NAV AND LDG AIDS GLA, GVA AND SPR DELETED AND PAS, LOC 22, \n    DME 22 AND LOC 04 REVISED. \n    FLT PROC SPECIAL REGULATION FOR GENEVA TMA/CTR REVISED. \n    SEVERAL SID AND STAR REVISED. \n    ADC, AOC AND ARC REVISED.\n    IAC SRA RWY 04 AND IAC SRA RWY 22 WITHDRAWN. \n    SEVERAL IAC REVISED.",
          "transactionId": "73707264",
          "icao": "LSGG",
          "issueDate": "2024-09-19T04:00:00.000+00:00",
          "startDate": "2024-09-19T04:00:00.000+00:00",
          "endDate": "2024-09-19T04:00:00.000+00:00",
          "source": "USNS",
          "sourceType": "I",
          "mapPointer": "POINT(6.10895 46.23806389)",
          "geometry": "POINT(5105901.28612306 4966695.40062213)",
          "createdAt": "2024-09-19T04:00:00.000+00:00",
          "updatedAt": "2024-09-19T04:00:00.000+00:00",
          "isSnowtam": false,
          "isProcedure": false
        }
      },
      "NotamUpdate": {
        "type": "object",
        "properties": {
          "notamId": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000,
            "description": "The NOTAM message text."
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "icao": {
            "type": "string",
            "nullable": true,
            "pattern": "^[A-Z]{4}$"
          },
          "issueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "type": "string",
            "nullable": true
          },
          "mapPointer": {
            "type": "string",
            "nullable": true
          },
          "geometry": {
            "type": "string",
            "nullable": true
          },
          "isSnowtam": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the NOTAM is a SNOWTAM.\nA SNOWTAM (Snow and/or Ice NOTAM) is a special type of NOTAM (Notice to Airmen) issued by an airport to provide pilots with critical information about hazardous conditions on the movement area (runways and taxiways) caused by snow, ice, slush, frost, or standing water"
          },
          "isProcedure": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the NOTAM is related to a procedure."
          }
        },
        "example": {
          "id": "67155d167139c42577c75279",
          "notamId": "A0611/24",
          "message": "A0611/24 NOTAMN\n    Q) LSAS/QFATT/IV/BO/A/000/999/4614N00607E005\n    A) LSGG B) 2410310000 C) 2411132359\n    E) TRIGGER NOTAM - PERM AIRAC AMDT 010/2024:\n    MAG VAR REVISED. \n    RDO NAV AND LDG AIDS GLA, GVA AND SPR DELETED AND PAS, LOC 22, \n    DME 22 AND LOC 04 REVISED. \n    FLT PROC SPECIAL REGULATION FOR GENEVA TMA/CTR REVISED. \n    SEVERAL SID AND STAR REVISED. \n    ADC, AOC AND ARC REVISED.\n    IAC SRA RWY 04 AND IAC SRA RWY 22 WITHDRAWN. \n    SEVERAL IAC REVISED.",
          "transactionId": "73707264",
          "icao": "LSGG",
          "issueDate": "2024-09-19T04:00:00.000+00:00",
          "startDate": "2024-09-19T04:00:00.000+00:00",
          "endDate": "2024-09-19T04:00:00.000+00:00",
          "source": "USNS",
          "sourceType": "I",
          "mapPointer": "POINT(6.10895 46.23806389)",
          "geometry": "POINT(5105901.28612306 4966695.40062213)",
          "createdAt": "2024-09-19T04:00:00.000+00:00",
          "updatedAt": "2024-09-19T04:00:00.000+00:00",
          "isSnowtam": false,
          "isProcedure": false
        }
      },
      "Runway": {
        "type": "object",
        "required": [
          "name",
          "length",
          "width",
          "isClosed",
          "isLighted",
          "lowEndIdent",
          "lowEndElevation",
          "lowEndHeading",
          "lowEndDisplacedThreshold",
          "lowEndLatitude",
          "lowEndLongitude",
          "highEndIdent",
          "highEndElevation",
          "highEndHeading",
          "highEndDisplacedThreshold",
          "highEndLatitude",
          "highEndLongitude"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "length": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "nullable": true
          },
          "isLighted": {
            "type": "boolean",
            "nullable": true
          },
          "lowEndIdent": {
            "type": "string",
            "nullable": true
          },
          "lowEndElevation": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lowEndHeading": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lowEndDisplacedThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lowEndLatitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lowEndLongitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "highEndIdent": {
            "type": "string",
            "nullable": true
          },
          "highEndElevation": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "highEndHeading": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "highEndDisplacedThreshold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "highEndLatitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "highEndLongitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "SearchResult": {
        "type": "object",
        "required": [
          "airports"
        ],
        "properties": {
          "airports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Airport"
            }
          }
        }
      },
      "UnauthorizedError": {
        "type": "object",
        "required": [
          "statusCode",
          "name",
          "message"
        ],
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "name": {
            "type": "string",
            "enum": [
              "Unauthorized"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "username",
          "email",
          "isVerified"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          },
          "isVerified": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "example": {
          "id": "123",
          "username": "john_doe",
          "email": "john.doe@aerodb.net",
          "createdAt": "2020-01-01T00:00:00Z",
          "updatedAt": "2020-01-01T00:00:00Z",
          "isVerified": true,
          "verificationDate": "2020-01-01T00:00:00Z",
          "lastSeen": "2020-01-01T00:00:00Z"
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          }
        },
        "example": {
          "id": "123",
          "username": "john_doe",
          "email": "john.doe@aerodb.net",
          "createdAt": "2020-01-01T00:00:00Z",
          "updatedAt": "2020-01-01T00:00:00Z",
          "isVerified": true,
          "verificationDate": "2020-01-01T00:00:00Z",
          "lastSeen": "2020-01-01T00:00:00Z"
        }
      },
      "ValidationError": {
        "type": "object",
        "required": [
          "statusCode",
          "name",
          "message",
          "details"
        ],
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "name": {
            "type": "string",
            "enum": [
              "Bad Request"
            ]
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "apiKey"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "Bearer"
      }
    }
  }
}