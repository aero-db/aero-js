{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "User": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "verificationToken": {
            "type": "string"
          },
          "verificationTokenExpiry": {
            "type": "string"
          },
          "verificationDate": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "permissions": {
            "items": {
              "type": "string",
              "enum": [
                "ADMIN",
                "USER"
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "email",
          "password",
          "firstName",
          "lastName",
          "verified",
          "disabled",
          "permissions"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "RunwayEnd": {
        "properties": {
          "ident": {
            "type": "string",
            "description": "The name of the runway end."
          },
          "elevation": {
            "type": "number",
            "format": "double",
            "description": "The elevation of the runway end in feets."
          },
          "heading": {
            "type": "number",
            "format": "double",
            "description": "The heading of the runway end in degrees."
          },
          "displacedThreshold": {
            "type": "number",
            "format": "double",
            "description": "The displaced threshold of the runway end in feets."
          },
          "coordinates": {
            "properties": {
              "longitude": {
                "type": "number",
                "format": "double"
              },
              "latitude": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "longitude",
              "latitude"
            ],
            "type": "object",
            "description": "The coordinates of the runway end."
          }
        },
        "required": [
          "ident"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Runway": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the runway."
          },
          "length": {
            "type": "number",
            "format": "double",
            "description": "The length of the runway in feets."
          },
          "width": {
            "type": "number",
            "format": "double",
            "description": "The width of the runway in feets."
          },
          "lowEnd": {
            "$ref": "#/components/schemas/RunwayEnd"
          },
          "highEnd": {
            "$ref": "#/components/schemas/RunwayEnd"
          },
          "surface": {
            "type": "string",
            "description": "The surface of the runway."
          },
          "isClosed": {
            "type": "boolean",
            "description": "True if the runway is closed."
          },
          "isLighted": {
            "type": "boolean",
            "description": "True if the runway is lighted."
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Frequency": {
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of frequency."
          },
          "name": {
            "type": "string",
            "description": "The name of the frequency."
          },
          "frequency": {
            "type": "number",
            "format": "double",
            "description": "The frequency in MHz."
          }
        },
        "required": [
          "type",
          "name",
          "frequency"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "AirportUrl": {
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "website",
              "wikipedia"
            ]
          }
        },
        "required": [
          "url",
          "type"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "AirportInternal": {
        "properties": {
          "fsx_runways": {
            "type": "string"
          },
          "fsx_airport": {
            "type": "string"
          }
        },
        "required": [
          "fsx_runways",
          "fsx_airport"
        ],
        "type": "object",
        "description": "Airport raw internal data provided by scrappers"
      },
      "Airport": {
        "description": "Represents an airport.",
        "properties": {
          "airportId": {
            "type": "string",
            "description": "Unique internal identifier of the airport."
          },
          "name": {
            "type": "string",
            "description": "The name of the airport."
          },
          "localCode": {
            "type": "string",
            "description": "A code used to identify the airport locally."
          },
          "icaoCode": {
            "type": "string",
            "description": "The International Civil Aviation Organization (ICAO) code of the airport."
          },
          "gpsCode": {
            "type": "string",
            "description": "The Global Positioning System (GPS) code of the airport."
          },
          "iataCode": {
            "type": "string",
            "description": "The International Air Transport Association (IATA) code of the airport."
          },
          "coordinates": {
            "properties": {
              "longitude": {
                "type": "number",
                "format": "double"
              },
              "latitude": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "longitude",
              "latitude"
            ],
            "type": "object",
            "description": "The coordinates of the airport."
          },
          "elevation": {
            "type": "number",
            "format": "double",
            "description": "The elevation of the airport in feets."
          },
          "countryCode": {
            "type": "string",
            "description": "The country where the airport is located.\n\nISO 3166-1 alpha-2 code.",
            "example": "US"
          },
          "city": {
            "type": "string",
            "description": "The city where the airport is located."
          },
          "state": {
            "type": "string",
            "description": "The state where the airport is located."
          },
          "county": {
            "type": "string",
            "description": "The county where the airport is located."
          },
          "continent": {
            "type": "string",
            "description": "The continent where the airport is located (2 letters code).",
            "example": "EU"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the airport in the TZ database format.",
            "example": "America/New_York"
          },
          "runways": {
            "items": {
              "$ref": "#/components/schemas/Runway"
            },
            "type": "array"
          },
          "frequencies": {
            "items": {
              "$ref": "#/components/schemas/Frequency"
            },
            "type": "array"
          },
          "urls": {
            "items": {
              "$ref": "#/components/schemas/AirportUrl"
            },
            "type": "array",
            "description": "Various URLs related to the airport."
          },
          "_internal": {
            "$ref": "#/components/schemas/AirportInternal",
            "description": "Internal properties"
          },
          "type": {
            "type": "string",
            "enum": [
              "smallAirport",
              "mediumAirport",
              "largeAirport",
              "heliport",
              "seaplaneBase",
              "baloonPort",
              "closed"
            ],
            "description": "The type of airport."
          }
        },
        "required": [
          "airportId",
          "name",
          "type"
        ],
        "type": "object",
        "additionalProperties": false,
        "example": {
          "name": "John F. Kennedy International Airport",
          "icao": "KJFK",
          "iata": "JFK",
          "coordinates": {
            "latitude": 40.6413,
            "longitude": -73.7781
          },
          "elevation": 13,
          "countryCode": "US",
          "city": "New York",
          "state": "New York",
          "county": "Queens",
          "timezone": "America/New_York",
          "runways": [
            {
              "name": "Runway 1",
              "length": 10000,
              "surface": "CON"
            },
            {
              "name": "Runway 2",
              "length": 8000,
              "surface": "ASP"
            }
          ],
          "frequencies": [
            {
              "name": "Tower",
              "frequency": 118.3
            },
            {
              "name": "Ground",
              "frequency": 121.9
            }
          ]
        }
      },
      "Airline": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the airline."
          },
          "icao": {
            "type": "string",
            "description": "The ICAO code of the airline."
          },
          "iata": {
            "type": "string",
            "description": "The IATA code of the airline."
          },
          "callSign": {
            "type": "string",
            "description": "The call sign of the airline."
          },
          "websiteUrl": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "isDefunct": {
            "type": "boolean",
            "description": "True if the airline is defunct and no longer operating."
          }
        },
        "required": [
          "name",
          "isDefunct"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CityCode": {
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "location": {
            "properties": {
              "county": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "elevation": {
                "type": "number",
                "format": "double"
              },
              "longitude": {
                "type": "number",
                "format": "double"
              },
              "latitude": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "county",
              "state",
              "city",
              "country",
              "elevation",
              "longitude",
              "latitude"
            ],
            "type": "object"
          },
          "timezone": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name",
          "location",
          "timezone"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "AircraftType": {
        "description": "Represents an aircraft type.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the aircraft type."
          },
          "icao": {
            "type": "string",
            "description": "The ICAO code of the aircraft type."
          },
          "manufacturer": {
            "type": "string",
            "description": "The manufacturer of the aircraft type."
          },
          "categorie": {
            "type": "string",
            "enum": [
              "amphibian",
              "gyrocopter",
              "helicopter",
              "landplane",
              "seaplane",
              "tiltrotor",
              "other"
            ],
            "description": "The category of the aircraft type.\n\n- `amphibian`: An aircraft that can operate on land and water.\n\n- `gyrocopter`: A type of rotorcraft that uses an unpowered rotor in autorotation to develop lift.\n\n- `helicopter`: A type of rotorcraft in which lift and thrust are supplied by rotors.\n\n- `landplane`: An aircraft that operates on land.\n\n- `seaplane`: An aircraft that can operate on water.\n\n- `tiltrotor`: An aircraft that uses a pair of rotors mounted on rotating engine pods at the ends of fixed wings.\n\n- `other`: An aircraft that does not fit into any of the other categories."
          },
          "engineType": {
            "type": "string",
            "enum": [
              "electric",
              "turboprop",
              "jet",
              "piston",
              "rocket",
              "other"
            ]
          },
          "engineCount": {
            "type": "number",
            "format": "double",
            "description": "The number of engines of the aircraft type."
          },
          "wakeTurbulenceCategories": {
            "items": {
              "type": "string",
              "enum": [
                "L",
                "M",
                "H",
                "J"
              ]
            },
            "type": "array",
            "description": "The wake turbulence categories of the aircraft type.\n\n- `L`: Light\n\n- `M`: Medium\n\n- `H`: Heavy\n\n- `J`: Super"
          }
        },
        "required": [
          "name",
          "icao",
          "manufacturer",
          "categorie",
          "engineType",
          "wakeTurbulenceCategories"
        ],
        "type": "object",
        "additionalProperties": false,
        "example": {
          "name": "Airbus A380",
          "icao": "A388",
          "manufacturer": "Airbus",
          "categorie": "landplane",
          "engineType": "jet",
          "engineCount": 4,
          "wakeTurbulenceCategories": [
            "H",
            "J"
          ]
        }
      },
      "SearchResult": {
        "properties": {
          "aircraftTypes": {
            "items": {
              "$ref": "#/components/schemas/AircraftType"
            },
            "type": "array"
          },
          "cityCodes": {
            "items": {
              "$ref": "#/components/schemas/CityCode"
            },
            "type": "array"
          },
          "airlines": {
            "items": {
              "$ref": "#/components/schemas/Airline"
            },
            "type": "array"
          },
          "airports": {
            "items": {
              "$ref": "#/components/schemas/Airport"
            },
            "type": "array"
          }
        },
        "required": [
          "aircraftTypes",
          "cityCodes",
          "airlines",
          "airports"
        ],
        "type": "object"
      },
      "Notam": {
        "properties": {
          "notamId": {
            "type": "string",
            "description": "Unique identifier for the NOTAM.\n\nIt is expected to be the same as the NOTAM number but with slashes replaced by dashes.\n\nExample: A0611/24 -> A0611-24"
          },
          "notamNumber": {
            "type": "string",
            "description": "The NOTAM number."
          },
          "message": {
            "type": "string",
            "description": "The message of the NOTAM."
          },
          "transactionId": {
            "type": "number",
            "format": "double",
            "description": "The transaction ID of the NOTAM."
          },
          "icao": {
            "type": "string",
            "description": "The ICAO code of the location the NOTAM is related to."
          },
          "issueDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string"
          },
          "sourceType": {
            "type": "string"
          },
          "isSnowtam": {
            "type": "boolean",
            "description": "Indicates if the NOTAM is a SNOWTAM."
          },
          "isProcedure": {
            "type": "boolean",
            "description": "Indicates if the NOTAM is a procedure."
          },
          "mapPointer": {
            "type": "string"
          },
          "geometry": {
            "type": "string"
          }
        },
        "required": [
          "notamId",
          "notamNumber",
          "message",
          "transactionId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "QueryParameters": {
        "properties": {
          "filter": {
            "type": "string",
            "description": "filter to apply to the query\n\nExample: `{ \"icao\": \"KJFK\" }`\n\n [More details](https://www.mongodb.com/docs/compass/current/query/filter/)"
          },
          "sort": {
            "type": "string",
            "description": "Sort order of the results\n\nExample `{ \"createdAt\": \"desc\" }`\n\n[More details](https://www.mongodb.com/docs/compass/current/query/sort/)"
          },
          "limit": {
            "type": "number",
            "format": "double",
            "description": "Number of items to return",
            "example": 50,
            "default": 50,
            "maximum": 300
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": "Page number",
            "example": 1,
            "default": 1
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Partial_Notam_": {
        "properties": {
          "notamId": {
            "type": "string",
            "description": "Unique identifier for the NOTAM.\n\nIt is expected to be the same as the NOTAM number but with slashes replaced by dashes.\n\nExample: A0611/24 -> A0611-24"
          },
          "notamNumber": {
            "type": "string",
            "description": "The NOTAM number."
          },
          "message": {
            "type": "string",
            "description": "The message of the NOTAM."
          },
          "transactionId": {
            "type": "number",
            "format": "double",
            "description": "The transaction ID of the NOTAM."
          },
          "icao": {
            "type": "string",
            "description": "The ICAO code of the location the NOTAM is related to."
          },
          "issueDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string"
          },
          "sourceType": {
            "type": "string"
          },
          "isSnowtam": {
            "type": "boolean",
            "description": "Indicates if the NOTAM is a SNOWTAM."
          },
          "isProcedure": {
            "type": "boolean",
            "description": "Indicates if the NOTAM is a procedure."
          },
          "mapPointer": {
            "type": "string"
          },
          "geometry": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "SubDivision": {
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "code"
        ],
        "type": "object"
      },
      "Country": {
        "properties": {
          "name": {
            "type": "string"
          },
          "alpha2": {
            "type": "string"
          },
          "alpha3": {
            "type": "string"
          },
          "isoId": {
            "type": "number",
            "format": "double"
          },
          "subdivisions": {
            "items": {
              "$ref": "#/components/schemas/SubDivision"
            },
            "type": "array"
          },
          "continent": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "alpha2",
          "alpha3",
          "isoId",
          "subdivisions",
          "continent",
          "timezone"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Partial_Country_": {
        "properties": {
          "name": {
            "type": "string"
          },
          "alpha2": {
            "type": "string"
          },
          "alpha3": {
            "type": "string"
          },
          "isoId": {
            "type": "number",
            "format": "double"
          },
          "subdivisions": {
            "items": {
              "$ref": "#/components/schemas/SubDivision"
            },
            "type": "array"
          },
          "continent": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Partial_CityCode_": {
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "location": {
            "properties": {
              "county": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "elevation": {
                "type": "number",
                "format": "double"
              },
              "longitude": {
                "type": "number",
                "format": "double"
              },
              "latitude": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "county",
              "state",
              "city",
              "country",
              "elevation",
              "longitude",
              "latitude"
            ],
            "type": "object"
          },
          "timezone": {
            "type": "string"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Pick_User.email-or-password-or-firstName-or-lastName_": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "SignupParams": {
        "$ref": "#/components/schemas/Pick_User.email-or-password-or-firstName-or-lastName_"
      },
      "Pick_User.email-or-password_": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "LoginParams": {
        "$ref": "#/components/schemas/Pick_User.email-or-password_"
      },
      "RefreshTokenResponse": {
        "properties": {
          "token": {
            "type": "string"
          },
          "tokenExpires": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "token",
          "tokenExpires"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiKeyScope": {
        "type": "string",
        "enum": [
          "public",
          "admin"
        ]
      },
      "ApiKey": {
        "properties": {
          "key": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "scopes": {
            "items": {
              "$ref": "#/components/schemas/ApiKeyScope"
            },
            "type": "array"
          }
        },
        "required": [
          "key",
          "userId",
          "expires",
          "scopes"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Pick_Airport.airportId-or-name_": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the airport."
          },
          "airportId": {
            "type": "string",
            "description": "Unique internal identifier of the airport."
          }
        },
        "required": [
          "name",
          "airportId"
        ],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "AirportOverview": {
        "$ref": "#/components/schemas/Pick_Airport.airportId-or-name_"
      },
      "QueryParametersWithoutLimit": {
        "properties": {
          "filter": {
            "type": "string",
            "description": "filter to apply to the query\n\nExample: `{ \"icao\": \"KJFK\" }`\n\n [More details](https://www.mongodb.com/docs/compass/current/query/filter/)"
          },
          "sort": {
            "type": "string",
            "description": "Sort order of the results\n\nExample `{ \"createdAt\": \"desc\" }`\n\n[More details](https://www.mongodb.com/docs/compass/current/query/sort/)"
          },
          "limit": {
            "type": "number",
            "format": "double",
            "description": "Number of items to return",
            "example": 50,
            "default": 50
          },
          "page": {
            "type": "number",
            "format": "double",
            "description": "Page number",
            "example": 1,
            "default": 1
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "MetarResponse": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "A list of METAR reports"
      },
      "Partial_Airport_": {
        "properties": {
          "airportId": {
            "type": "string",
            "description": "Unique internal identifier of the airport."
          },
          "name": {
            "type": "string",
            "description": "The name of the airport."
          },
          "localCode": {
            "type": "string",
            "description": "A code used to identify the airport locally."
          },
          "icaoCode": {
            "type": "string",
            "description": "The International Civil Aviation Organization (ICAO) code of the airport."
          },
          "gpsCode": {
            "type": "string",
            "description": "The Global Positioning System (GPS) code of the airport."
          },
          "iataCode": {
            "type": "string",
            "description": "The International Air Transport Association (IATA) code of the airport."
          },
          "coordinates": {
            "properties": {
              "longitude": {
                "type": "number",
                "format": "double"
              },
              "latitude": {
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "longitude",
              "latitude"
            ],
            "type": "object",
            "description": "The coordinates of the airport."
          },
          "elevation": {
            "type": "number",
            "format": "double",
            "description": "The elevation of the airport in feets."
          },
          "countryCode": {
            "type": "string",
            "description": "The country where the airport is located.\n\nISO 3166-1 alpha-2 code.",
            "example": "US"
          },
          "city": {
            "type": "string",
            "description": "The city where the airport is located."
          },
          "state": {
            "type": "string",
            "description": "The state where the airport is located."
          },
          "county": {
            "type": "string",
            "description": "The county where the airport is located."
          },
          "continent": {
            "type": "string",
            "description": "The continent where the airport is located (2 letters code).",
            "example": "EU"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the airport in the TZ database format.",
            "example": "America/New_York"
          },
          "runways": {
            "items": {
              "$ref": "#/components/schemas/Runway"
            },
            "type": "array"
          },
          "frequencies": {
            "items": {
              "$ref": "#/components/schemas/Frequency"
            },
            "type": "array"
          },
          "urls": {
            "items": {
              "$ref": "#/components/schemas/AirportUrl"
            },
            "type": "array",
            "description": "Various URLs related to the airport."
          },
          "_internal": {
            "$ref": "#/components/schemas/AirportInternal",
            "description": "Internal properties"
          },
          "type": {
            "type": "string",
            "enum": [
              "smallAirport",
              "mediumAirport",
              "largeAirport",
              "heliport",
              "seaplaneBase",
              "baloonPort",
              "closed"
            ],
            "description": "The type of airport."
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Partial_Airline_": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the airline."
          },
          "icao": {
            "type": "string",
            "description": "The ICAO code of the airline."
          },
          "iata": {
            "type": "string",
            "description": "The IATA code of the airline."
          },
          "callSign": {
            "type": "string",
            "description": "The call sign of the airline."
          },
          "websiteUrl": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "isDefunct": {
            "type": "boolean",
            "description": "True if the airline is defunct and no longer operating."
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      },
      "Partial_AircraftType_": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the aircraft type."
          },
          "icao": {
            "type": "string",
            "description": "The ICAO code of the aircraft type."
          },
          "manufacturer": {
            "type": "string",
            "description": "The manufacturer of the aircraft type."
          },
          "categorie": {
            "type": "string",
            "enum": [
              "amphibian",
              "gyrocopter",
              "helicopter",
              "landplane",
              "seaplane",
              "tiltrotor",
              "other"
            ],
            "description": "The category of the aircraft type.\n\n- `amphibian`: An aircraft that can operate on land and water.\n\n- `gyrocopter`: A type of rotorcraft that uses an unpowered rotor in autorotation to develop lift.\n\n- `helicopter`: A type of rotorcraft in which lift and thrust are supplied by rotors.\n\n- `landplane`: An aircraft that operates on land.\n\n- `seaplane`: An aircraft that can operate on water.\n\n- `tiltrotor`: An aircraft that uses a pair of rotors mounted on rotating engine pods at the ends of fixed wings.\n\n- `other`: An aircraft that does not fit into any of the other categories."
          },
          "engineType": {
            "type": "string",
            "enum": [
              "other",
              "electric",
              "turboprop",
              "jet",
              "piston",
              "rocket"
            ]
          },
          "engineCount": {
            "type": "number",
            "format": "double",
            "description": "The number of engines of the aircraft type."
          },
          "wakeTurbulenceCategories": {
            "items": {
              "type": "string",
              "enum": [
                "L",
                "M",
                "H",
                "J"
              ]
            },
            "type": "array",
            "description": "The wake turbulence categories of the aircraft type.\n\n- `L`: Light\n\n- `M`: Medium\n\n- `H`: Heavy\n\n- `J`: Super"
          }
        },
        "type": "object",
        "description": "Make all properties in T optional"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      },
      "bearerToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "scopes": {
          "admin": "modify things",
          "user": "read things"
        }
      }
    }
  },
  "info": {
    "title": "aero-db",
    "version": "1.0.0",
    "description": "AeroDB API",
    "license": {
      "name": "ISC"
    },
    "contact": {}
  },
  "paths": {
    "/users/{userId}": {
      "get": {
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "description": "Get a user by id",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerToken": [
              "user",
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/search": {
      "get": {
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          }
        },
        "description": "Search for resources in the database",
        "tags": [
          "Search"
        ],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/notams/{notamId}": {
      "get": {
        "operationId": "GetNotam",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notam"
                }
              }
            }
          }
        },
        "description": "Get one notam by its ICAO code",
        "tags": [
          "Notams"
        ],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "notamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/notams": {
      "get": {
        "operationId": "GetNotams",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Notam"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get all notams",
        "tags": [
          "Notams"
        ],
        "security": [],
        "parameters": [
          {
            "description": "filter to apply to the query\n\nExample: `{ \"icao\": \"KJFK\" }`\n\n [More details](https://www.mongodb.com/docs/compass/current/query/filter/)",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order of the results\n\nExample `{ \"createdAt\": \"desc\" }`\n\n[More details](https://www.mongodb.com/docs/compass/current/query/sort/)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of items to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "double",
              "type": "number",
              "maximum": 300
            },
            "example": 50
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "double",
              "type": "number"
            },
            "example": 1
          }
        ]
      }
    },
    "/countries/{countryCode}": {
      "get": {
        "operationId": "GetCountry",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          }
        },
        "description": "Get one country by its ICAO code",
        "tags": [
          "Countries"
        ],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "countryCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/countries": {
      "get": {
        "operationId": "GetCountries",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get all countries",
        "tags": [
          "Countries"
        ],
        "security": [],
        "parameters": [
          {
            "description": "filter to apply to the query\n\nExample: `{ \"icao\": \"KJFK\" }`\n\n [More details](https://www.mongodb.com/docs/compass/current/query/filter/)",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order of the results\n\nExample `{ \"createdAt\": \"desc\" }`\n\n[More details](https://www.mongodb.com/docs/compass/current/query/sort/)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of items to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "double",
              "type": "number",
              "maximum": 300
            },
            "example": 50
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "double",
              "type": "number"
            },
            "example": 1
          }
        ]
      }
    },
    "/cityCodes/{code}": {
      "get": {
        "operationId": "GetCityCode",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CityCode"
                }
              }
            }
          }
        },
        "description": "Get one City code information by its ICAO code",
        "tags": [
          "City Codes"
        ],
        "security": [
          {
            "apiKey": [
              "public"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/cityCodes": {
      "get": {
        "operationId": "GetCityCodes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CityCode"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get all city codes",
        "tags": [
          "City Codes"
        ],
        "security": [
          {
            "apiKey": [
              "public"
            ]
          }
        ],
        "parameters": []
      }
    },
    "/signup": {
      "post": {
        "operationId": "Signup",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "description": "Create a new account",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupParams"
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokenRefreshExpires": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "tokenRefresh": {
                      "type": "string"
                    },
                    "tokenExpires": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "token": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "tokenRefreshExpires",
                    "tokenRefresh",
                    "tokenExpires",
                    "token",
                    "user"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Authenticate using email and password",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginParams"
              }
            }
          }
        }
      }
    },
    "/refreshToken": {
      "post": {
        "operationId": "RefreshToken",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          }
        },
        "description": "Refresh a token",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "required": [
                  "refreshToken"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "operationId": "Me",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "user"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Get informations about the current session",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "parameters": []
      }
    },
    "/apiKeys/{userId}": {
      "get": {
        "operationId": "GetForUser",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get all api keys belonging to a user",
        "tags": [
          "API Keys"
        ],
        "security": [
          {
            "jwt": [
              "user",
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/apiKeys/{userId}/regenerate": {
      "post": {
        "operationId": "RegenerateUserApiKey",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          }
        },
        "description": "Regenerate a user's api key",
        "tags": [
          "API Keys"
        ],
        "security": [
          {
            "jwt": [
              "user",
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/airports/all": {
      "get": {
        "operationId": "GetAllAirportsList",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AirportOverview"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get an overview list of all airports",
        "tags": [
          "Airports"
        ],
        "security": [],
        "parameters": [
          {
            "description": "filter to apply to the query\n\nExample: `{ \"icao\": \"KJFK\" }`\n\n [More details](https://www.mongodb.com/docs/compass/current/query/filter/)",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order of the results\n\nExample `{ \"createdAt\": \"desc\" }`\n\n[More details](https://www.mongodb.com/docs/compass/current/query/sort/)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of items to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "double",
              "type": "number",
              "maximum": 300
            },
            "example": 50
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "double",
              "type": "number"
            },
            "example": 1
          },
          {
            "description": "Number of items to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "double",
              "type": "number"
            },
            "example": 50
          }
        ]
      }
    },
    "/airports": {
      "get": {
        "operationId": "GetAirportsList",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Airport"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get all airports",
        "tags": [
          "Airports"
        ],
        "security": [],
        "parameters": [
          {
            "description": "filter to apply to the query\n\nExample: `{ \"icao\": \"KJFK\" }`\n\n [More details](https://www.mongodb.com/docs/compass/current/query/filter/)",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order of the results\n\nExample `{ \"createdAt\": \"desc\" }`\n\n[More details](https://www.mongodb.com/docs/compass/current/query/sort/)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of items to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "double",
              "type": "number",
              "maximum": 300
            },
            "example": 50
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "double",
              "type": "number"
            },
            "example": 1
          }
        ]
      }
    },
    "/airports/{airportId}": {
      "get": {
        "operationId": "GetAirport",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airport"
                }
              }
            }
          }
        },
        "description": "Get one airport",
        "tags": [
          "Airports"
        ],
        "security": [],
        "parameters": [
          {
            "description": "Unique identifier of the airport",
            "in": "path",
            "name": "airportId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/airports/{airportId}/metar": {
      "get": {
        "operationId": "GetAirportMetar",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetarResponse"
                }
              }
            }
          }
        },
        "description": "Get the METARs from the last 24 hours for one airport",
        "tags": [
          "Airports"
        ],
        "security": [],
        "parameters": [
          {
            "description": "Unique identifier of the airport",
            "in": "path",
            "name": "airportId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/airlines/{airlineId}": {
      "get": {
        "operationId": "GetAirline",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Airline"
                }
              }
            }
          }
        },
        "description": "Get one airline by its internal id",
        "tags": [
          "Airlines"
        ],
        "security": [
          {
            "apiKey": [
              "public"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "airlineId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/airlines": {
      "get": {
        "operationId": "GetAirlines",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Airline"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get all airlines",
        "tags": [
          "Airlines"
        ],
        "security": [
          {
            "apiKey": [
              "public"
            ]
          }
        ],
        "parameters": []
      }
    },
    "/aircraftTypes/{icao}": {
      "get": {
        "operationId": "GetAircraftType",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AircraftType"
                }
              }
            }
          }
        },
        "description": "Get one aircraft type by its ICAO code",
        "tags": [
          "Aircraft Types"
        ],
        "security": [
          {
            "apiKey": [
              "public"
            ]
          }
        ],
        "parameters": [
          {
            "description": "code of the aircraft type",
            "in": "path",
            "name": "icao",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/aircraftTypes": {
      "get": {
        "operationId": "GetAircraftTypes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AircraftType"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Get all aircraft types",
        "tags": [
          "Aircraft Types"
        ],
        "security": [
          {
            "apiKey": [
              "public"
            ]
          }
        ],
        "parameters": []
      }
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ]
}