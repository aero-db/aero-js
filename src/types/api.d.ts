/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/airports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a list of airports */
        get: operations["Airports_list"];
        put?: never;
        /** Create a new airport */
        post: operations["Airports_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/airports/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a simplified list of all airports
         * @description List all airports with minimal details.
         *
         *     *Limit on this operation is increased*
         */
        get: operations["Airports_listAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/airports/{airportId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an airport by ID */
        get: operations["Airports_get"];
        put?: never;
        post?: never;
        /** Delete an airport by ID */
        delete: operations["Airports_delete"];
        options?: never;
        head?: never;
        /** Update an existing airport */
        patch: operations["Airports_update"];
        trace?: never;
    };
    "/countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a list of countries */
        get: operations["Countries_list"];
        put?: never;
        /** Create a new country */
        post: operations["Countries_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/countries/{countryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a country by ID */
        get: operations["Countries_get"];
        put?: never;
        post?: never;
        /** Delete a country */
        delete: operations["Countries_delete"];
        options?: never;
        head?: never;
        /** Update an existing country */
        patch: operations["Countries_update"];
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate a user and return a JWT token. */
        post: operations["Auth_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the current user based on the JWT token. */
        get: operations["Auth_getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a list of NOTAMs
         * @description Return a list of NOTAMs
         *
         *     If unauthenticated, the result is limited to 5 items.
         */
        get: operations["Notams_list"];
        put?: never;
        /** Create a new NOTAM */
        post: operations["Notams_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notams/{notamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a NOTAM by ID */
        get: operations["Notams_get"];
        put?: never;
        post?: never;
        /** Delete a NOTAM by ID */
        delete: operations["Notams_delete"];
        options?: never;
        head?: never;
        /** Update a NOTAM */
        patch: operations["Notams_update"];
        trace?: never;
    };
    "/refreshToken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh the JWT token using a refresh token. */
        post: operations["Auth_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search in the database */
        get: operations["Search_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new user account. */
        post: operations["Auth_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a list of users */
        get: operations["Users_list"];
        put?: never;
        /** Create a new user */
        post: operations["Users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user by ID */
        get: operations["Users_get"];
        put?: never;
        post?: never;
        /** Delete a user by ID */
        delete: operations["Users_delete"];
        options?: never;
        head?: never;
        /** Update an existing user */
        patch: operations["Users_update"];
        trace?: never;
    };
    "/users/{userId}/refreshApiKey": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh API key for a user */
        post: operations["Users_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "id": "1",
         *       "createdAt": "2020-01-01T00:00:00Z",
         *       "updatedAt": "2020-01-01T00:00:00Z",
         *       "icaoCode": "KATL",
         *       "name": "Hartsfieldâ€“Jackson Atlanta International Airport",
         *       "iataCode": "ATL",
         *       "localCode": "ATL",
         *       "latitude": 33.6407,
         *       "longitude": -84.4277,
         *       "elevation": 1026,
         *       "countryCode": "US",
         *       "city": "Atlanta",
         *       "state": "Georgia",
         *       "county": "Fulton",
         *       "continentCode": "NA",
         *       "timezone": "America/New_York",
         *       "facilityType": "InternationalAirport",
         *       "isPrivate": false,
         *       "isClosed": false,
         *       "frequencies": [
         *         {
         *           "name": "ATIS",
         *           "type": "ATIS",
         *           "description": "Automatic Terminal Information Service",
         *           "frequency": 118.4
         *         },
         *         {
         *           "name": "Ground Control",
         *           "type": "Ground",
         *           "description": "Ground Control Frequency",
         *           "frequency": 121.9
         *         },
         *         {
         *           "name": "Tower Control",
         *           "type": "Tower",
         *           "description": "Tower Control Frequency",
         *           "frequency": 118.3
         *         }
         *       ],
         *       "runways": [
         *         {
         *           "name": "Runway 8L",
         *           "length": 12000,
         *           "width": 150,
         *           "isClosed": false,
         *           "isLighted": true,
         *           "lowEndIdent": "8L",
         *           "lowEndElevation": 1026,
         *           "lowEndHeading": 80,
         *           "lowEndDisplacedThreshold": 0,
         *           "lowEndLatitude": 33.6407,
         *           "lowEndLongitude": -84.4277,
         *           "highEndIdent": "26R",
         *           "highEndElevation": 1026,
         *           "highEndHeading": 260,
         *           "highEndDisplacedThreshold": 0,
         *           "highEndLatitude": 33.6407,
         *           "highEndLongitude": -84.4277
         *         }
         *       ]
         *     } */
        Airport: {
            /** @description UUID of the airport */
            readonly id: string;
            /** Format: date-time */
            readonly updatedAt: string;
            name: string;
            icaoCode: string | null;
            iataCode: string | null;
            localCode: string | null;
            latitude: number | null;
            longitude: number | null;
            /** Format: int32 */
            elevation: number | null;
            /** @description ISO 3166-1 alpha-2 country code */
            countryCode: string | null;
            city: string | null;
            state: string | null;
            county: string | null;
            continentCode: components["schemas"]["ContinentCode"] | null;
            timezone: string | null;
            facilityType: components["schemas"]["FACILITY_TYPE"] | null;
            isPrivate: boolean | null;
            isClosed: boolean | null;
            frequencies: components["schemas"]["Frequency"][];
            runways: components["schemas"]["Runway"][];
        };
        /** @example {
         *       "id": "1",
         *       "createdAt": "2020-01-01T00:00:00Z",
         *       "updatedAt": "2020-01-01T00:00:00Z",
         *       "icaoCode": "KATL",
         *       "name": "Hartsfieldâ€“Jackson Atlanta International Airport",
         *       "iataCode": "ATL",
         *       "localCode": "ATL",
         *       "latitude": 33.6407,
         *       "longitude": -84.4277,
         *       "elevation": 1026,
         *       "countryCode": "US",
         *       "city": "Atlanta",
         *       "state": "Georgia",
         *       "county": "Fulton",
         *       "continentCode": "NA",
         *       "timezone": "America/New_York",
         *       "facilityType": "InternationalAirport",
         *       "isPrivate": false,
         *       "isClosed": false,
         *       "frequencies": [
         *         {
         *           "name": "ATIS",
         *           "type": "ATIS",
         *           "description": "Automatic Terminal Information Service",
         *           "frequency": 118.4
         *         },
         *         {
         *           "name": "Ground Control",
         *           "type": "Ground",
         *           "description": "Ground Control Frequency",
         *           "frequency": 121.9
         *         },
         *         {
         *           "name": "Tower Control",
         *           "type": "Tower",
         *           "description": "Tower Control Frequency",
         *           "frequency": 118.3
         *         }
         *       ],
         *       "runways": [
         *         {
         *           "name": "Runway 8L",
         *           "length": 12000,
         *           "width": 150,
         *           "isClosed": false,
         *           "isLighted": true,
         *           "lowEndIdent": "8L",
         *           "lowEndElevation": 1026,
         *           "lowEndHeading": 80,
         *           "lowEndDisplacedThreshold": 0,
         *           "lowEndLatitude": 33.6407,
         *           "lowEndLongitude": -84.4277,
         *           "highEndIdent": "26R",
         *           "highEndElevation": 1026,
         *           "highEndHeading": 260,
         *           "highEndDisplacedThreshold": 0,
         *           "highEndLatitude": 33.6407,
         *           "highEndLongitude": -84.4277
         *         }
         *       ]
         *     } */
        AirportUpdate: {
            name?: string;
            icaoCode?: string | null;
            iataCode?: string | null;
            localCode?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            /** Format: int32 */
            elevation?: number | null;
            /** @description ISO 3166-1 alpha-2 country code */
            countryCode?: string | null;
            city?: string | null;
            state?: string | null;
            county?: string | null;
            continentCode?: components["schemas"]["ContinentCode"] | null;
            timezone?: string | null;
            facilityType?: components["schemas"]["FACILITY_TYPE"] | null;
            isPrivate?: boolean | null;
            isClosed?: boolean | null;
            frequencies?: components["schemas"]["Frequency"][];
            runways?: components["schemas"]["Runway"][];
        };
        AuthCredentials: {
            /** @description JWT token */
            token: string;
            /** @description Refresh token */
            refreshToken: string;
            /** @description User object */
            user: components["schemas"]["User"];
        };
        AuthSignup: {
            username: string;
            email: string;
            password: string;
        };
        /**
         * @description ISO 3166-1 continent code
         * @enum {string}
         */
        ContinentCode: "AF" | "AN" | "AS" | "EU" | "NA" | "OC" | "SA" | "UN";
        /** @example {
         *       "id": "1",
         *       "createdAt": "2020-01-01T00:00:00Z",
         *       "updatedAt": "2020-01-01T00:00:00Z",
         *       "continentCode": "NA",
         *       "isoId": "US",
         *       "timezone": "America/New_York",
         *       "countryCode": "US",
         *       "alpha3": "USA",
         *       "name": "United States",
         *       "subdivisions": [
         *         {
         *           "code": "CA",
         *           "name": "California"
         *         },
         *         {
         *           "code": "NY",
         *           "name": "New York"
         *         }
         *       ]
         *     } */
        Country: {
            readonly id: string;
            /** Format: date-time */
            readonly createdAt: string;
            /** Format: date-time */
            readonly updatedAt: string;
            continentCode: components["schemas"]["ContinentCode"];
            isoId: string;
            timezone: string;
            /** @description ISO 3166-1 alpha-2 country code */
            countryCode: string;
            /** @description ISO 3166-1 alpha-3 country code */
            alpha3: string;
            name: string;
            subdivisions: components["schemas"]["CountrySubdivision"][];
        };
        /** @example {
         *       "code": "AD-07",
         *       "name": "Andorra la Vella"
         *     } */
        CountrySubdivision: {
            code: string;
            name: string;
        };
        /** @example {
         *       "id": "1",
         *       "createdAt": "2020-01-01T00:00:00Z",
         *       "updatedAt": "2020-01-01T00:00:00Z",
         *       "continentCode": "NA",
         *       "isoId": "US",
         *       "timezone": "America/New_York",
         *       "countryCode": "US",
         *       "alpha3": "USA",
         *       "name": "United States",
         *       "subdivisions": [
         *         {
         *           "code": "CA",
         *           "name": "California"
         *         },
         *         {
         *           "code": "NY",
         *           "name": "New York"
         *         }
         *       ]
         *     } */
        CountryUpdate: {
            continentCode?: components["schemas"]["ContinentCode"];
            isoId?: string;
            timezone?: string;
            /** @description ISO 3166-1 alpha-2 country code */
            countryCode?: string;
            /** @description ISO 3166-1 alpha-3 country code */
            alpha3?: string;
            name?: string;
            subdivisions?: components["schemas"]["CountrySubdivision"][];
        };
        Error: {
            /** Format: int32 */
            status: number;
            /** Format: int32 */
            code: number;
            message: string;
        };
        /**
         * @description A type of facility
         * @enum {string}
         */
        FACILITY_TYPE: "Airport" | "GliderSite" | "AirfieldCivil" | "InternationalAirport" | "HeliportMilitary" | "MilitaryAerodrome" | "UltraLightFlyingSite" | "HeliportCivil" | "AerodromeClosed" | "AirportIFR" | "AirfieldWater" | "LandingStrip" | "AgriculturalLandingStrip" | "Altiport";
        Frequency: {
            name: string;
            type: string | null;
            description: string | null;
            /** Format: float */
            frequency: number;
        };
        NotFoundError: {
            /** @enum {number} */
            statusCode: 404;
            /** @enum {string} */
            name: "Not Found";
            message: string;
        };
        /** @example {
         *       "id": "67155d167139c42577c75279",
         *       "notamId": "A0611/24",
         *       "message": "A0611/24 NOTAMN\n    Q) LSAS/QFATT/IV/BO/A/000/999/4614N00607E005\n    A) LSGG B) 2410310000 C) 2411132359\n    E) TRIGGER NOTAM - PERM AIRAC AMDT 010/2024:\n    MAG VAR REVISED. \n    RDO NAV AND LDG AIDS GLA, GVA AND SPR DELETED AND PAS, LOC 22, \n    DME 22 AND LOC 04 REVISED. \n    FLT PROC SPECIAL REGULATION FOR GENEVA TMA/CTR REVISED. \n    SEVERAL SID AND STAR REVISED. \n    ADC, AOC AND ARC REVISED.\n    IAC SRA RWY 04 AND IAC SRA RWY 22 WITHDRAWN. \n    SEVERAL IAC REVISED.",
         *       "transactionId": "73707264",
         *       "icao": "LSGG",
         *       "issueDate": "2024-09-19T04:00:00.000+00:00",
         *       "startDate": "2024-09-19T04:00:00.000+00:00",
         *       "endDate": "2024-09-19T04:00:00.000+00:00",
         *       "source": "USNS",
         *       "sourceType": "I",
         *       "mapPointer": "POINT(6.10895 46.23806389)",
         *       "geometry": "POINT(5105901.28612306 4966695.40062213)",
         *       "createdAt": "2024-09-19T04:00:00.000+00:00",
         *       "updatedAt": "2024-09-19T04:00:00.000+00:00",
         *       "canceledDate": null,
         *       "isSnowtam": false,
         *       "isProcedure": false
         *     } */
        Notam: {
            /** @description UUID of the notam */
            readonly id: string;
            /** Format: date-time */
            readonly updatedAt: string;
            notamId: string | null;
            /** @description The NOTAM message text. */
            message: string;
            transactionId: string | null;
            icao: string | null;
            /** Format: date-time */
            issueDate: string | null;
            /** Format: date-time */
            startDate: string | null;
            /** Format: date-time */
            endDate: string | null;
            /** Format: date-time */
            canceledDate: string | null;
            source: string | null;
            sourceType: string | null;
            mapPointer: string | null;
            geometry: string | null;
            /** @description Indicates if the NOTAM is a SNOWTAM.
             *     A SNOWTAM (Snow and/or Ice NOTAM) is a special type of NOTAM (Notice to Airmen) issued by an airport to provide pilots with critical information about hazardous conditions on the movement area (runways and taxiways) caused by snow, ice, slush, frost, or standing water */
            isSnowtam: boolean | null;
            /** @description Indicates if the NOTAM is related to a procedure. */
            isProcedure: boolean | null;
        };
        /** @example {
         *       "id": "67155d167139c42577c75279",
         *       "notamId": "A0611/24",
         *       "message": "A0611/24 NOTAMN\n    Q) LSAS/QFATT/IV/BO/A/000/999/4614N00607E005\n    A) LSGG B) 2410310000 C) 2411132359\n    E) TRIGGER NOTAM - PERM AIRAC AMDT 010/2024:\n    MAG VAR REVISED. \n    RDO NAV AND LDG AIDS GLA, GVA AND SPR DELETED AND PAS, LOC 22, \n    DME 22 AND LOC 04 REVISED. \n    FLT PROC SPECIAL REGULATION FOR GENEVA TMA/CTR REVISED. \n    SEVERAL SID AND STAR REVISED. \n    ADC, AOC AND ARC REVISED.\n    IAC SRA RWY 04 AND IAC SRA RWY 22 WITHDRAWN. \n    SEVERAL IAC REVISED.",
         *       "transactionId": "73707264",
         *       "icao": "LSGG",
         *       "issueDate": "2024-09-19T04:00:00.000+00:00",
         *       "startDate": "2024-09-19T04:00:00.000+00:00",
         *       "endDate": "2024-09-19T04:00:00.000+00:00",
         *       "source": "USNS",
         *       "sourceType": "I",
         *       "mapPointer": "POINT(6.10895 46.23806389)",
         *       "geometry": "POINT(5105901.28612306 4966695.40062213)",
         *       "createdAt": "2024-09-19T04:00:00.000+00:00",
         *       "updatedAt": "2024-09-19T04:00:00.000+00:00",
         *       "canceledDate": null,
         *       "isSnowtam": false,
         *       "isProcedure": false
         *     } */
        NotamUpdate: {
            notamId?: string | null;
            /** @description The NOTAM message text. */
            message?: string;
            transactionId?: string | null;
            icao?: string | null;
            /** Format: date-time */
            issueDate?: string | null;
            /** Format: date-time */
            startDate?: string | null;
            /** Format: date-time */
            endDate?: string | null;
            /** Format: date-time */
            canceledDate?: string | null;
            source?: string | null;
            sourceType?: string | null;
            mapPointer?: string | null;
            geometry?: string | null;
            /** @description Indicates if the NOTAM is a SNOWTAM.
             *     A SNOWTAM (Snow and/or Ice NOTAM) is a special type of NOTAM (Notice to Airmen) issued by an airport to provide pilots with critical information about hazardous conditions on the movement area (runways and taxiways) caused by snow, ice, slush, frost, or standing water */
            isSnowtam?: boolean | null;
            /** @description Indicates if the NOTAM is related to a procedure. */
            isProcedure?: boolean | null;
        };
        Runway: {
            name: string;
            /** Format: int32 */
            length: number | null;
            /** Format: int32 */
            width: number | null;
            isClosed: boolean | null;
            isLighted: boolean | null;
            lowEndIdent: string | null;
            /** Format: int32 */
            lowEndElevation: number | null;
            /** Format: int32 */
            lowEndHeading: number | null;
            /** Format: int32 */
            lowEndDisplacedThreshold: number | null;
            /** Format: float */
            lowEndLatitude: number | null;
            /** Format: float */
            lowEndLongitude: number | null;
            highEndIdent: string | null;
            /** Format: int32 */
            highEndElevation: number | null;
            /** Format: int32 */
            highEndHeading: number | null;
            /** Format: int32 */
            highEndDisplacedThreshold: number | null;
            /** Format: float */
            highEndLatitude: number | null;
            /** Format: float */
            highEndLongitude: number | null;
        };
        SearchResult: {
            /** @description Represents a paginated list of items. */
            airports: {
                /**
                 * Format: int32
                 * @description Number of items returned
                 */
                count: number;
                /**
                 * Format: int32
                 * @description Total number of items available
                 */
                totalCount: number;
                items: components["schemas"]["Airport"][];
            };
        };
        /** @example {
         *       "id": "1",
         *       "icaoCode": "KATL",
         *       "name": "Hartsfieldâ€“Jackson Atlanta International Airport"
         *     } */
        SimplifiedAirport: {
            id: string;
            icaoCode: string | null;
            name: string;
        };
        UnauthorizedError: {
            /** @enum {number} */
            statusCode: 401;
            /** @enum {string} */
            name: "Unauthorized";
            message: string;
        };
        /** @example {
         *       "id": "123",
         *       "username": "john_doe",
         *       "email": "john.doe@aerodb.net",
         *       "createdAt": "2020-01-01T00:00:00Z",
         *       "updatedAt": "2020-01-01T00:00:00Z",
         *       "isVerified": true,
         *       "verificationDate": "2020-01-01T00:00:00Z",
         *       "lastSeen": "2020-01-01T00:00:00Z"
         *     } */
        User: {
            readonly id: string;
            /** Format: date-time */
            readonly createdAt: string;
            /** Format: date-time */
            readonly updatedAt: string;
            username: string;
            email: string;
            readonly isVerified: boolean;
        };
        /** @example {
         *       "id": "123",
         *       "username": "john_doe",
         *       "email": "john.doe@aerodb.net",
         *       "createdAt": "2020-01-01T00:00:00Z",
         *       "updatedAt": "2020-01-01T00:00:00Z",
         *       "isVerified": true,
         *       "verificationDate": "2020-01-01T00:00:00Z",
         *       "lastSeen": "2020-01-01T00:00:00Z"
         *     } */
        UserUpdate: {
            username?: string;
            email?: string;
        };
        ValidationError: {
            /** @enum {number} */
            statusCode: 400;
            /** @enum {string} */
            name: "Bad Request";
            message: string;
            details: string[];
        };
    };
    responses: never;
    parameters: {
        /** @description Filter expression to apply to the list. */
        "ListParameters.filter": string;
        /** @description Maximum number of items to return per page. */
        "ListParameters.limit": number;
        /** @description Page number to retrieve. */
        "ListParameters.page": number;
        /** @description Sort order for the list. */
        "ListParameters.sort": string;
        /** @description Maximum number of items to return per page. */
        UnlimitedListParameters: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Airports_list: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return per page. */
                limit?: components["parameters"]["ListParameters.limit"];
                /** @description Page number to retrieve. */
                page?: components["parameters"]["ListParameters.page"];
                /** @description Filter expression to apply to the list. */
                filter?: components["parameters"]["ListParameters.filter"];
                /** @description Sort order for the list. */
                sort?: components["parameters"]["ListParameters.sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description Number of items returned
                         */
                        count: number;
                        /**
                         * Format: int32
                         * @description Total number of items available
                         */
                        totalCount: number;
                        items: components["schemas"]["Airport"][];
                    };
                };
            };
        };
    };
    Airports_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Airport"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Airport"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Airports_listAll: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return per page. */
                limit?: components["parameters"]["UnlimitedListParameters"];
                /** @description Page number to retrieve. */
                page?: components["parameters"]["ListParameters.page"];
                /** @description Filter expression to apply to the list. */
                filter?: components["parameters"]["ListParameters.filter"];
                /** @description Sort order for the list. */
                sort?: components["parameters"]["ListParameters.sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimplifiedAirport"][];
                };
            };
        };
    };
    Airports_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                airportId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Airport"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Airports_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                airportId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Airports_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                airportId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AirportUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Airport"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Countries_list: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return per page. */
                limit?: components["parameters"]["ListParameters.limit"];
                /** @description Page number to retrieve. */
                page?: components["parameters"]["ListParameters.page"];
                /** @description Filter expression to apply to the list. */
                filter?: components["parameters"]["ListParameters.filter"];
                /** @description Sort order for the list. */
                sort?: components["parameters"]["ListParameters.sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description Number of items returned
                         */
                        count: number;
                        /**
                         * Format: int32
                         * @description Total number of items available
                         */
                        totalCount: number;
                        items: components["schemas"]["Country"][];
                    };
                };
            };
        };
    };
    Countries_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Country"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Country"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Countries_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                countryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Country"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Countries_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                countryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Countries_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                countryId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CountryUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Country"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Auth_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "john.doe@aerodb.net",
                 *       "password": "password123"
                 *     } */
                "application/json": {
                    email: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthCredentials"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
        };
    };
    Auth_getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Notams_list: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return per page. */
                limit?: components["parameters"]["ListParameters.limit"];
                /** @description Page number to retrieve. */
                page?: components["parameters"]["ListParameters.page"];
                /** @description Filter expression to apply to the list. */
                filter?: components["parameters"]["ListParameters.filter"];
                /** @description Sort order for the list. */
                sort?: components["parameters"]["ListParameters.sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description Number of items returned
                         */
                        count: number;
                        /**
                         * Format: int32
                         * @description Total number of items available
                         */
                        totalCount: number;
                        items: components["schemas"]["Notam"][];
                    };
                };
            };
        };
    };
    Notams_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notam"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notam"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Notams_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notam"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Notams_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notamId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Notams_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notamId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotamUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notam"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Auth_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "text/plain": string;
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthCredentials"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Search_search: {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResult"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Auth_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "john.doe@aerodb.net",
                 *       "password": "password123",
                 *       "username": "john_doe"
                 *     } */
                "application/json": components["schemas"]["AuthSignup"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Users_list: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return per page. */
                limit?: components["parameters"]["ListParameters.limit"];
                /** @description Page number to retrieve. */
                page?: components["parameters"]["ListParameters.page"];
                /** @description Filter expression to apply to the list. */
                filter?: components["parameters"]["ListParameters.filter"];
                /** @description Sort order for the list. */
                sort?: components["parameters"]["ListParameters.sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description Number of items returned
                         */
                        count: number;
                        /**
                         * Format: int32
                         * @description Total number of items available
                         */
                        totalCount: number;
                        items: components["schemas"]["User"][];
                    };
                };
            };
        };
    };
    Users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    Users_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Users_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    Users_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
}
